<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <link href="/2019/03/23/Java%E5%9F%BA%E7%A1%801.1%20%E2%80%94%20Java%E5%85%AB%E5%A4%A7%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E5%8C%85%E8%A3%85%E7%B1%BB-1/"/>
      <url>/2019/03/23/Java%E5%9F%BA%E7%A1%801.1%20%E2%80%94%20Java%E5%85%AB%E5%A4%A7%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E5%8C%85%E8%A3%85%E7%B1%BB-1/</url>
      <content type="html"><![CDATA[<h1 id="Java基础1-1-—-Java八大基本数据类型及其包装类"><a href="#Java基础1-1-—-Java八大基本数据类型及其包装类" class="headerlink" title="Java基础1.1 — Java八大基本数据类型及其包装类"></a>Java基础1.1 — Java八大基本数据类型及其包装类</h1><h3 id="一、Java的八大基本数据类型"><a href="#一、Java的八大基本数据类型" class="headerlink" title="一、Java的八大基本数据类型"></a>一、Java的八大基本数据类型</h3><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">数据类型</th><th style="text-align:center">大小/位</th><th style="text-align:center">封装类</th><th style="text-align:center">默认值</th><th style="text-align:center">可表示数据范围</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">byte</td><td style="text-align:center">8</td><td style="text-align:center">java.lang.Byte</td><td style="text-align:center">0</td><td style="text-align:center">-128~127</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">short</td><td style="text-align:center">16</td><td style="text-align:center">java.lang.Short</td><td style="text-align:center">0</td><td style="text-align:center">-32768~32767</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">int</td><td style="text-align:center">32</td><td style="text-align:center">java.lang.Integer</td><td style="text-align:center">0</td><td style="text-align:center">-2147483648 ~ 2147483647</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">long</td><td style="text-align:center">64</td><td style="text-align:center">java.lang.Long</td><td style="text-align:center">0L</td><td style="text-align:center">-9223372036854775808 ~ 9223372036854775807</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">float</td><td style="text-align:center">32</td><td style="text-align:center">java.lang.Float</td><td style="text-align:center">0F</td><td style="text-align:center">1.4E-45~3.4028235E38</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">double</td><td style="text-align:center">64</td><td style="text-align:center">java.lang.Double</td><td style="text-align:center">0D</td><td style="text-align:center">4.9E-324~1.7976931348623157E308</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">char</td><td style="text-align:center">16</td><td style="text-align:center">java.lang.Character</td><td style="text-align:center">空</td><td style="text-align:center">0~65535</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">boolean</td><td style="text-align:center">8</td><td style="text-align:center">java.lang.Boolean</td><td style="text-align:center">false</td><td style="text-align:center">true或false</td></tr></tbody></table><blockquote><p>无需记忆可表示范围，在JDK里面数据类型可承载的最大最小值已经在包装类里面用常量的形式表示出来了<br>如:<strong>Integer.MAX_VALUE</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//byte</span></span><br><span class="line">System.out.println(<span class="string">"基本类型：byte二进制位数："</span>+Byte.SIZE);</span><br><span class="line">System.out.println(<span class="string">"包装类：java.lang.Byte"</span>);</span><br><span class="line">System.out.println(<span class="string">"最小值：Byte.MIN_VALUE="</span>+Byte.MIN_VALUE);</span><br><span class="line">System.out.println(<span class="string">"最大值：Byte.MAX_VALUE="</span>+Byte.MAX_VALUE);</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">//short</span></span><br><span class="line">System.out.println(<span class="string">"基本类型：short二进制位数："</span>+Short.SIZE);</span><br><span class="line">System.out.println(<span class="string">"包装类：java.lang.Short"</span>);</span><br><span class="line">System.out.println(<span class="string">"最小值：Short.MIN_VALUE="</span>+Short.MIN_VALUE);</span><br><span class="line">System.out.println(<span class="string">"最大值：Short.MAX_VALUE="</span>+Short.MAX_VALUE);</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">//int</span></span><br><span class="line">System.out.println(<span class="string">"基本类型：int二进制位数："</span>+Integer.SIZE);</span><br><span class="line">System.out.println(<span class="string">"包装类：java.lang.Integer"</span>);</span><br><span class="line">System.out.println(<span class="string">"最小值：Integer.MIN_VALUE="</span>+Integer.MIN_VALUE);</span><br><span class="line">System.out.println(<span class="string">"最大值：Integer.MAX_VALUE="</span>+Integer.MAX_VALUE);</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">//long</span></span><br><span class="line">System.out.println(<span class="string">"基本类型：long二进制位数："</span>+Long.SIZE);</span><br><span class="line">System.out.println(<span class="string">"包装类：java.lang.Long"</span>);</span><br><span class="line">System.out.println(<span class="string">"最小值：Long.MIN_VALUE="</span>+Long.MIN_VALUE);</span><br><span class="line">System.out.println(<span class="string">"最大值：Long.MAX_VALUE="</span>+Long.MAX_VALUE);</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">//float</span></span><br><span class="line">System.out.println(<span class="string">"基本类型：float二进制位数："</span>+Float.SIZE);</span><br><span class="line">System.out.println(<span class="string">"包装类：java.lang.Float"</span>);</span><br><span class="line">System.out.println(<span class="string">"最小值：Float.MIN_VALUE="</span>+Float.MIN_VALUE);</span><br><span class="line">System.out.println(<span class="string">"最大值：Float.MAX_VALUE="</span>+Float.MAX_VALUE);</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">//double</span></span><br><span class="line">System.out.println(<span class="string">"基本类型：double二进制位数："</span>+Double.SIZE);</span><br><span class="line">System.out.println(<span class="string">"包装类：java.lang.Double"</span>);</span><br><span class="line">System.out.println(<span class="string">"最小值：Double.MIN_VALUE="</span>+Double.MIN_VALUE);</span><br><span class="line">System.out.println(<span class="string">"最大值：Double.MAX_VALUE="</span>+Double.MAX_VALUE);</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">//char</span></span><br><span class="line">System.out.println(<span class="string">"基本类型：char二进制位数："</span>+Character.SIZE);</span><br><span class="line">System.out.println(<span class="string">"包装类：java.lang.Character"</span>);</span><br><span class="line"><span class="comment">//以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台</span></span><br><span class="line">System.out.println(<span class="string">"最小值：Character.MIN_VALUE="</span>+(<span class="keyword">int</span>)Character.MIN_VALUE);</span><br><span class="line"><span class="comment">//以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台</span></span><br><span class="line">System.out.println(<span class="string">"最大值：Character.MAX_VALUE="</span>+(<span class="keyword">int</span>)Character.MAX_VALUE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1、进一步分类"><a href="#1、进一步分类" class="headerlink" title="1、进一步分类"></a>1、进一步分类</h5><ul><li>整型：byte、short、int、long</li><li>浮点型：float、double</li><li>逻辑型：boolean</li><li>字符型：char</li></ul><h5 id="2、基本数据类型的转换"><a href="#2、基本数据类型的转换" class="headerlink" title="2、基本数据类型的转换"></a>2、基本数据类型的转换</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> -&gt; <span class="keyword">short</span> -&gt; <span class="keyword">int</span> -&gt; <span class="keyword">long</span> -&gt; <span class="keyword">float</span> -&gt; <span class="keyword">double</span></span><br></pre></td></tr></table></figure><p>从左到右的数据类型转换都是隐式转换，无需强转。</p><p>从右到做的数据类型转换需要强转，并且会损失精度</p><h3 id="二、包装类"><a href="#二、包装类" class="headerlink" title="二、包装类"></a>二、包装类</h3><p>java为每个基本数据类型都提供了包装类，包装类的默认值是null，并且内部提供了一些相关的操作方法。基本类型如int,直接在栈中分配空间,存储数值,而包装类是对象，需要在堆内存中分配空间,栈中存放着对应的堆空间地址</p><h5 id="1、自动拆箱和自动装箱"><a href="#1、自动拆箱和自动装箱" class="headerlink" title="1、自动拆箱和自动装箱"></a>1、自动拆箱和自动装箱</h5><p>在JDK1.5以后，提供了自动拆箱和自动装箱功能这样的”语法糖”,如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是自动装箱</span></span><br><span class="line">Integer i = <span class="number">1</span>; </span><br><span class="line"><span class="comment">//转换成了</span></span><br><span class="line">Integer i = Integer.valueOf(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//所以,如果给i赋值null，再赋值给基本数据类型，就会导致NullPointerException</span></span><br></pre></td></tr></table></figure></p><p>从字节码看出也是一样的</p><p>(通过idea搜索<strong>jclasslib bytecode viewer</strong>插件查看更方便，安装后在 <strong>View-&gt;Show Bytes Code With jclasslib</strong>)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">0</span> iconst_1</span><br><span class="line"> 1 invokestatic #2 &lt;java/lang/Integer.valueOf&gt;</span><br><span class="line"> <span class="number">4</span> astore_1</span><br><span class="line"> <span class="number">5</span> iconst_1</span><br><span class="line"> 6 invokestatic #2 &lt;java/lang/Integer.valueOf&gt;</span><br><span class="line"> <span class="number">9</span> astore_2</span><br><span class="line"><span class="number">10</span> <span class="keyword">return</span></span><br></pre></td></tr></table></figure></p><p>同样地<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自动拆箱, 在表达式中只要有一个不是包装类型的都会自动拆箱</span></span><br><span class="line">Integer i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> j = i;,</span><br><span class="line"><span class="comment">//后面一句转换成了</span></span><br><span class="line"><span class="keyword">int</span> j = i.intValue();</span><br></pre></td></tr></table></figure></p><p>下面是字节码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">0</span> iconst_1</span><br><span class="line"> 1 invokestatic #2 &lt;java/lang/Integer.valueOf&gt;</span><br><span class="line"> <span class="number">4</span> astore_1</span><br><span class="line"> <span class="number">5</span> aload_1</span><br><span class="line"> 6 invokevirtual #3 &lt;java/lang/Integer.intValue&gt;</span><br><span class="line"> <span class="number">9</span> istore_2</span><br><span class="line"><span class="number">10</span> aload_1</span><br><span class="line">11 invokevirtual #3 &lt;java/lang/Integer.intValue&gt;</span><br><span class="line"><span class="number">14</span> istore_3</span><br><span class="line"><span class="number">15</span> <span class="keyword">return</span></span><br></pre></td></tr></table></figure></p><p>由此也可以看出，自动拆装箱属于<strong>编译特性</strong></p><h5 id="2、包装类的valueOf方法的缓存池"><a href="#2、包装类的valueOf方法的缓存池" class="headerlink" title="2、包装类的valueOf方法的缓存池"></a>2、包装类的valueOf方法的缓存池</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Byte <span class="title">valueOf</span><span class="params">(<span class="keyword">byte</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> offset = <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">return</span> ByteCache.cache[(<span class="keyword">int</span>)b + offset];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Short <span class="title">valueOf</span><span class="params">(<span class="keyword">short</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> offset = <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">int</span> sAsInt = s;</span><br><span class="line">    <span class="keyword">if</span> (sAsInt &gt;= -<span class="number">128</span> &amp;&amp; sAsInt &lt;= <span class="number">127</span>) &#123; <span class="comment">// must cache</span></span><br><span class="line">        <span class="keyword">return</span> ShortCache.cache[sAsInt + offset];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Short(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title">valueOf</span><span class="params">(<span class="keyword">long</span> l)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> offset = <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= -<span class="number">128</span> &amp;&amp; l &lt;= <span class="number">127</span>) &#123; <span class="comment">// will cache</span></span><br><span class="line">        <span class="keyword">return</span> LongCache.cache[(<span class="keyword">int</span>)l + offset];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Long(l);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Float <span class="title">valueOf</span><span class="params">(<span class="keyword">float</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Float(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Double <span class="title">valueOf</span><span class="params">(<span class="keyword">double</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Double(d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Character <span class="title">valueOf</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c &lt;= <span class="number">127</span>) &#123; <span class="comment">// must cache</span></span><br><span class="line">        <span class="keyword">return</span> CharacterCache.cache[(<span class="keyword">int</span>)c];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Character(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">valueOf</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (b ? TRUE : FALSE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Boolean TRUE = <span class="keyword">new</span> Boolean(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Boolean FALSE = <span class="keyword">new</span> Boolean(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>Byte</strong>都是用缓存池里面的值</li><li><strong>Short、Integer、Long</strong>会缓存 <strong>-128~127</strong></li><li><strong>Float和Double</strong>则直接返回，因为精度数不能每次都一样，所以缓存没有意义</li><li><strong>Character</strong>则是缓存 <strong>&lt;=127</strong></li><li><strong>Boolean</strong>,只有两个值，直接就用常量的形式表示出来了</li></ul><h3 id="三、一些需要注意的地方"><a href="#三、一些需要注意的地方" class="headerlink" title="三、一些需要注意的地方"></a>三、一些需要注意的地方</h3><ul><li>double和float，不能完全表示精度。如 : 3 x 0.1 = 0.3 ,这样会是<strong>false</strong>,所以在进行带精度计算时，需要用到<strong>BigDecimal</strong></li><li>switch中只能用byte、char、short、int，JDK1.7后可用String</li><li>Java中的数值运算最低要求是int类型，如果参与运算的变量类型都没有超过int类型，则它们都会被自动升级为int类型再进行运算，所以它们运算后的结果类型也是int类型</li><li>两边都是包装类的<strong>equals</strong>比较值，<strong>==</strong> 比较引用，其中一边是表达式的，<strong>==</strong> 就是比较数值</li></ul><h3 id="四、一些题目"><a href="#四、一些题目" class="headerlink" title="四、一些题目"></a>四、一些题目</h3><p>1.下面语句做了什么<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="number">1</span>; <span class="comment">//valueOf()自动装箱成Integer类型</span></span><br><span class="line">i+=<span class="number">1</span>;<span class="comment">//先是将Integer类型的i自动拆箱成int，完成加法运算后再自动装箱成Integer</span></span><br></pre></td></tr></table></figure></p><p>2.下面程序语句有什么问题<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> s1 = <span class="number">1</span>;</span><br><span class="line">s1 = s1 + <span class="number">1</span>;  <span class="comment">//编译不通过、需要强转</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">short</span> s2 =<span class="number">1</span>;</span><br><span class="line">s2 += <span class="number">1</span>;  <span class="comment">//正常编译</span></span><br><span class="line"></span><br><span class="line">Integer i = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">int</span> j = i; <span class="comment">//NullPointException</span></span><br></pre></td></tr></table></figure></p><p>3.下面程序的运行结果是什么<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Integer i1 = <span class="number">128</span>;</span><br><span class="line">Integer i2 = <span class="number">128</span>;</span><br><span class="line">System.out.println(i1 == i2); <span class="comment">//false 比较了对象</span></span><br><span class="line"></span><br><span class="line">Integer i1 = <span class="number">127</span>;</span><br><span class="line">Integer i2 = <span class="number">127</span>;</span><br><span class="line">System.out.println(i1 == i2); <span class="comment">//true 缓存了-128~127</span></span><br><span class="line"></span><br><span class="line">Float f1 = <span class="number">1f</span>;</span><br><span class="line">Float f2 = <span class="number">1f</span>;</span><br><span class="line">System.out.println(f1 == f2) <span class="comment">//false 始终new新对象</span></span><br></pre></td></tr></table></figure></p><p><a href="https://blog.csdn.net/BuquTianya/article/details/80685437" target="_blank" rel="noopener">https://blog.csdn.net/BuquTianya/article/details/80685437</a></p><ul><li>char存储的是unicode编码字符，汉字也是unicode所以可以存储，但是一些生僻字不在unicode编码字符集中就不能显示</li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2019/03/23/Java%E5%9F%BA%E7%A1%801.1%20%E2%80%94%20Java%E5%85%AB%E5%A4%A7%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
      <url>/2019/03/23/Java%E5%9F%BA%E7%A1%801.1%20%E2%80%94%20Java%E5%85%AB%E5%A4%A7%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E5%8C%85%E8%A3%85%E7%B1%BB/</url>
      <content type="html"><![CDATA[<h1 id="Java基础1-1-—-Java八大基本数据类型及其包装类"><a href="#Java基础1-1-—-Java八大基本数据类型及其包装类" class="headerlink" title="Java基础1.1 — Java八大基本数据类型及其包装类"></a>Java基础1.1 — Java八大基本数据类型及其包装类</h1><h3 id="一、Java的八大基本数据类型"><a href="#一、Java的八大基本数据类型" class="headerlink" title="一、Java的八大基本数据类型"></a>一、Java的八大基本数据类型</h3><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">数据类型</th><th style="text-align:center">大小/位</th><th style="text-align:center">封装类</th><th style="text-align:center">默认值</th><th style="text-align:center">可表示数据范围</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">byte</td><td style="text-align:center">8</td><td style="text-align:center">java.lang.Byte</td><td style="text-align:center">0</td><td style="text-align:center">-128~127</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">short</td><td style="text-align:center">16</td><td style="text-align:center">java.lang.Short</td><td style="text-align:center">0</td><td style="text-align:center">-32768~32767</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">int</td><td style="text-align:center">32</td><td style="text-align:center">java.lang.Integer</td><td style="text-align:center">0</td><td style="text-align:center">-2147483648 ~ 2147483647</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">long</td><td style="text-align:center">64</td><td style="text-align:center">java.lang.Long</td><td style="text-align:center">0L</td><td style="text-align:center">-9223372036854775808 ~ 9223372036854775807</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">float</td><td style="text-align:center">32</td><td style="text-align:center">java.lang.Float</td><td style="text-align:center">0F</td><td style="text-align:center">1.4E-45~3.4028235E38</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">double</td><td style="text-align:center">64</td><td style="text-align:center">java.lang.Double</td><td style="text-align:center">0D</td><td style="text-align:center">4.9E-324~1.7976931348623157E308</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">char</td><td style="text-align:center">16</td><td style="text-align:center">java.lang.Character</td><td style="text-align:center">空</td><td style="text-align:center">0~65535</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">boolean</td><td style="text-align:center">8</td><td style="text-align:center">java.lang.Boolean</td><td style="text-align:center">false</td><td style="text-align:center">true或false</td></tr></tbody></table><blockquote><p>无需记忆可表示范围，在JDK里面数据类型可承载的最大最小值已经在包装类里面用常量的形式表示出来了<br>如:<strong>Integer.MAX_VALUE</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//byte</span></span><br><span class="line">System.out.println(<span class="string">"基本类型：byte二进制位数："</span>+Byte.SIZE);</span><br><span class="line">System.out.println(<span class="string">"包装类：java.lang.Byte"</span>);</span><br><span class="line">System.out.println(<span class="string">"最小值：Byte.MIN_VALUE="</span>+Byte.MIN_VALUE);</span><br><span class="line">System.out.println(<span class="string">"最大值：Byte.MAX_VALUE="</span>+Byte.MAX_VALUE);</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">//short</span></span><br><span class="line">System.out.println(<span class="string">"基本类型：short二进制位数："</span>+Short.SIZE);</span><br><span class="line">System.out.println(<span class="string">"包装类：java.lang.Short"</span>);</span><br><span class="line">System.out.println(<span class="string">"最小值：Short.MIN_VALUE="</span>+Short.MIN_VALUE);</span><br><span class="line">System.out.println(<span class="string">"最大值：Short.MAX_VALUE="</span>+Short.MAX_VALUE);</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">//int</span></span><br><span class="line">System.out.println(<span class="string">"基本类型：int二进制位数："</span>+Integer.SIZE);</span><br><span class="line">System.out.println(<span class="string">"包装类：java.lang.Integer"</span>);</span><br><span class="line">System.out.println(<span class="string">"最小值：Integer.MIN_VALUE="</span>+Integer.MIN_VALUE);</span><br><span class="line">System.out.println(<span class="string">"最大值：Integer.MAX_VALUE="</span>+Integer.MAX_VALUE);</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">//long</span></span><br><span class="line">System.out.println(<span class="string">"基本类型：long二进制位数："</span>+Long.SIZE);</span><br><span class="line">System.out.println(<span class="string">"包装类：java.lang.Long"</span>);</span><br><span class="line">System.out.println(<span class="string">"最小值：Long.MIN_VALUE="</span>+Long.MIN_VALUE);</span><br><span class="line">System.out.println(<span class="string">"最大值：Long.MAX_VALUE="</span>+Long.MAX_VALUE);</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">//float</span></span><br><span class="line">System.out.println(<span class="string">"基本类型：float二进制位数："</span>+Float.SIZE);</span><br><span class="line">System.out.println(<span class="string">"包装类：java.lang.Float"</span>);</span><br><span class="line">System.out.println(<span class="string">"最小值：Float.MIN_VALUE="</span>+Float.MIN_VALUE);</span><br><span class="line">System.out.println(<span class="string">"最大值：Float.MAX_VALUE="</span>+Float.MAX_VALUE);</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">//double</span></span><br><span class="line">System.out.println(<span class="string">"基本类型：double二进制位数："</span>+Double.SIZE);</span><br><span class="line">System.out.println(<span class="string">"包装类：java.lang.Double"</span>);</span><br><span class="line">System.out.println(<span class="string">"最小值：Double.MIN_VALUE="</span>+Double.MIN_VALUE);</span><br><span class="line">System.out.println(<span class="string">"最大值：Double.MAX_VALUE="</span>+Double.MAX_VALUE);</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">//char</span></span><br><span class="line">System.out.println(<span class="string">"基本类型：char二进制位数："</span>+Character.SIZE);</span><br><span class="line">System.out.println(<span class="string">"包装类：java.lang.Character"</span>);</span><br><span class="line"><span class="comment">//以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台</span></span><br><span class="line">System.out.println(<span class="string">"最小值：Character.MIN_VALUE="</span>+(<span class="keyword">int</span>)Character.MIN_VALUE);</span><br><span class="line"><span class="comment">//以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台</span></span><br><span class="line">System.out.println(<span class="string">"最大值：Character.MAX_VALUE="</span>+(<span class="keyword">int</span>)Character.MAX_VALUE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1、进一步分类"><a href="#1、进一步分类" class="headerlink" title="1、进一步分类"></a>1、进一步分类</h5><ul><li>整型：byte、short、int、long</li><li>浮点型：float、double</li><li>逻辑型：boolean</li><li>字符型：char</li></ul><h5 id="2、基本数据类型的转换"><a href="#2、基本数据类型的转换" class="headerlink" title="2、基本数据类型的转换"></a>2、基本数据类型的转换</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> -&gt; <span class="keyword">short</span> -&gt; <span class="keyword">int</span> -&gt; <span class="keyword">long</span> -&gt; <span class="keyword">float</span> -&gt; <span class="keyword">double</span></span><br></pre></td></tr></table></figure><p>从左到右的数据类型转换都是隐式转换，无需强转。</p><p>从右到做的数据类型转换需要强转，并且会损失精度</p><h3 id="二、包装类"><a href="#二、包装类" class="headerlink" title="二、包装类"></a>二、包装类</h3><p>java为每个基本数据类型都提供了包装类，包装类的默认值是null，并且内部提供了一些相关的操作方法。基本类型如int,直接在栈中分配空间,存储数值,而包装类是对象，需要在堆内存中分配空间,栈中存放着对应的堆空间地址</p><h5 id="1、自动拆箱和自动装箱"><a href="#1、自动拆箱和自动装箱" class="headerlink" title="1、自动拆箱和自动装箱"></a>1、自动拆箱和自动装箱</h5><p>在JDK1.5以后，提供了自动拆箱和自动装箱功能这样的”语法糖”,如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是自动装箱</span></span><br><span class="line">Integer i = <span class="number">1</span>; </span><br><span class="line"><span class="comment">//转换成了</span></span><br><span class="line">Integer i = Integer.valueOf(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//所以,如果给i赋值null，再赋值给基本数据类型，就会导致NullPointerException</span></span><br></pre></td></tr></table></figure></p><p>从字节码看出也是一样的</p><p>(通过idea搜索<strong>jclasslib bytecode viewer</strong>插件查看更方便，安装后在 <strong>View-&gt;Show Bytes Code With jclasslib</strong>)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">0</span> iconst_1</span><br><span class="line"> 1 invokestatic #2 &lt;java/lang/Integer.valueOf&gt;</span><br><span class="line"> <span class="number">4</span> astore_1</span><br><span class="line"> <span class="number">5</span> iconst_1</span><br><span class="line"> 6 invokestatic #2 &lt;java/lang/Integer.valueOf&gt;</span><br><span class="line"> <span class="number">9</span> astore_2</span><br><span class="line"><span class="number">10</span> <span class="keyword">return</span></span><br></pre></td></tr></table></figure></p><p>同样地<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自动拆箱, 在表达式中只要有一个不是包装类型的都会自动拆箱</span></span><br><span class="line">Integer i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> j = i;,</span><br><span class="line"><span class="comment">//后面一句转换成了</span></span><br><span class="line"><span class="keyword">int</span> j = i.intValue();</span><br></pre></td></tr></table></figure></p><p>下面是字节码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">0</span> iconst_1</span><br><span class="line"> 1 invokestatic #2 &lt;java/lang/Integer.valueOf&gt;</span><br><span class="line"> <span class="number">4</span> astore_1</span><br><span class="line"> <span class="number">5</span> aload_1</span><br><span class="line"> 6 invokevirtual #3 &lt;java/lang/Integer.intValue&gt;</span><br><span class="line"> <span class="number">9</span> istore_2</span><br><span class="line"><span class="number">10</span> aload_1</span><br><span class="line">11 invokevirtual #3 &lt;java/lang/Integer.intValue&gt;</span><br><span class="line"><span class="number">14</span> istore_3</span><br><span class="line"><span class="number">15</span> <span class="keyword">return</span></span><br></pre></td></tr></table></figure></p><p>由此也可以看出，自动拆装箱属于<strong>编译特性</strong></p><h5 id="2、包装类的valueOf方法的缓存池"><a href="#2、包装类的valueOf方法的缓存池" class="headerlink" title="2、包装类的valueOf方法的缓存池"></a>2、包装类的valueOf方法的缓存池</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Byte <span class="title">valueOf</span><span class="params">(<span class="keyword">byte</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> offset = <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">return</span> ByteCache.cache[(<span class="keyword">int</span>)b + offset];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Short <span class="title">valueOf</span><span class="params">(<span class="keyword">short</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> offset = <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">int</span> sAsInt = s;</span><br><span class="line">    <span class="keyword">if</span> (sAsInt &gt;= -<span class="number">128</span> &amp;&amp; sAsInt &lt;= <span class="number">127</span>) &#123; <span class="comment">// must cache</span></span><br><span class="line">        <span class="keyword">return</span> ShortCache.cache[sAsInt + offset];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Short(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title">valueOf</span><span class="params">(<span class="keyword">long</span> l)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> offset = <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= -<span class="number">128</span> &amp;&amp; l &lt;= <span class="number">127</span>) &#123; <span class="comment">// will cache</span></span><br><span class="line">        <span class="keyword">return</span> LongCache.cache[(<span class="keyword">int</span>)l + offset];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Long(l);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Float <span class="title">valueOf</span><span class="params">(<span class="keyword">float</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Float(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Double <span class="title">valueOf</span><span class="params">(<span class="keyword">double</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Double(d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Character <span class="title">valueOf</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c &lt;= <span class="number">127</span>) &#123; <span class="comment">// must cache</span></span><br><span class="line">        <span class="keyword">return</span> CharacterCache.cache[(<span class="keyword">int</span>)c];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Character(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">valueOf</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (b ? TRUE : FALSE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Boolean TRUE = <span class="keyword">new</span> Boolean(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Boolean FALSE = <span class="keyword">new</span> Boolean(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>Byte</strong>都是用缓存池里面的值</li><li><strong>Short、Integer、Long</strong>会缓存 <strong>-128~127</strong></li><li><strong>Float和Double</strong>则直接返回，因为精度数不能每次都一样，所以缓存没有意义</li><li><strong>Character</strong>则是缓存 <strong>&lt;=127</strong></li><li><strong>Boolean</strong>,只有两个值，直接就用常量的形式表示出来了</li></ul><h3 id="三、一些需要注意的地方"><a href="#三、一些需要注意的地方" class="headerlink" title="三、一些需要注意的地方"></a>三、一些需要注意的地方</h3><ul><li>double和float，不能完全表示精度。如 : 3 x 0.1 = 0.3 ,这样会是<strong>false</strong>,所以在进行带精度计算时，需要用到<strong>BigDecimal</strong></li><li>switch中只能用byte、char、short、int，JDK1.7后可用String</li><li>Java中的数值运算最低要求是int类型，如果参与运算的变量类型都没有超过int类型，则它们都会被自动升级为int类型再进行运算，所以它们运算后的结果类型也是int类型</li><li>两边都是包装类的<strong>equals</strong>比较值，<strong>==</strong> 比较引用，其中一边是表达式的，<strong>==</strong> 就是比较数值</li></ul><h3 id="四、一些题目"><a href="#四、一些题目" class="headerlink" title="四、一些题目"></a>四、一些题目</h3><p>1.下面语句做了什么<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="number">1</span>; <span class="comment">//valueOf()自动装箱成Integer类型</span></span><br><span class="line">i+=<span class="number">1</span>;<span class="comment">//先是将Integer类型的i自动拆箱成int，完成加法运算后再自动装箱成Integer</span></span><br></pre></td></tr></table></figure></p><p>2.下面程序语句有什么问题<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> s1 = <span class="number">1</span>;</span><br><span class="line">s1 = s1 + <span class="number">1</span>;  <span class="comment">//编译不通过、需要强转</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">short</span> s2 =<span class="number">1</span>;</span><br><span class="line">s2 += <span class="number">1</span>;  <span class="comment">//正常编译</span></span><br><span class="line"></span><br><span class="line">Integer i = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">int</span> j = i; <span class="comment">//NullPointException</span></span><br></pre></td></tr></table></figure></p><p>3.下面程序的运行结果是什么<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Integer i1 = <span class="number">128</span>;</span><br><span class="line">Integer i2 = <span class="number">128</span>;</span><br><span class="line">System.out.println(i1 == i2); <span class="comment">//false 比较了对象</span></span><br><span class="line"></span><br><span class="line">Integer i1 = <span class="number">127</span>;</span><br><span class="line">Integer i2 = <span class="number">127</span>;</span><br><span class="line">System.out.println(i1 == i2); <span class="comment">//true 缓存了-128~127</span></span><br><span class="line"></span><br><span class="line">Float f1 = <span class="number">1f</span>;</span><br><span class="line">Float f2 = <span class="number">1f</span>;</span><br><span class="line">System.out.println(f1 == f2) <span class="comment">//false 始终new新对象</span></span><br></pre></td></tr></table></figure></p><p><a href="https://blog.csdn.net/BuquTianya/article/details/80685437" target="_blank" rel="noopener">https://blog.csdn.net/BuquTianya/article/details/80685437</a></p><ul><li>char存储的是unicode编码字符，汉字也是unicode所以可以存储，但是一些生僻字不在unicode编码字符集中就不能显示</li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>创建Hexo博客并部署到云主机</title>
      <link href="/2018/06/18/%E5%88%9B%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E4%B8%BB%E6%9C%BA/"/>
      <url>/2018/06/18/%E5%88%9B%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E4%B8%BB%E6%9C%BA/</url>
      <content type="html"><![CDATA[<p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官方文档</a></p><h1 id="一、云服务器配置-Ubuntu-16-04-LTS"><a href="#一、云服务器配置-Ubuntu-16-04-LTS" class="headerlink" title="一、云服务器配置(Ubuntu 16.04 LTS)"></a>一、云服务器配置(Ubuntu 16.04 LTS)</h1><h3 id="安装git和nginx"><a href="#安装git和nginx" class="headerlink" title="安装git和nginx"></a>安装<code>git</code>和<code>nginx</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install git-core nginx</span><br></pre></td></tr></table></figure><h3 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h3><p>创建目录用于存放静态文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/www/blog</span><br></pre></td></tr></table></figure><p>创建一个Nginx配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/blog.conf</span><br></pre></td></tr></table></figure><p>键入以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">listen 8080;</span><br><span class="line">root /var/www/blog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启Nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><h3 id="配置Git-Hooks"><a href="#配置Git-Hooks" class="headerlink" title="配置Git Hooks"></a>配置Git Hooks</h3><p>生成<code>blog.git</code>作为仓库，当本地Push过来时自动同步</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/blog.git &amp;&amp; cd ~/blog.git</span><br><span class="line">git init --bare</span><br></pre></td></tr></table></figure><p>创建<code>Hooks</code>脚本，当<code>blog.git</code>收到Push时自动执行<code>post-receive</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>然后脚本里面做的操作就是自动clone</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /var/www/blog</span><br><span class="line">sudo git clone /root/blog.git /var/www/blog</span><br></pre></td></tr></table></figure><p>最后再给个权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><h1 id="二、本地相关配置-Mac-OS"><a href="#二、本地相关配置-Mac-OS" class="headerlink" title="二、本地相关配置(Mac OS)"></a>二、本地相关配置(Mac OS)</h1><h3 id="安装相关软件"><a href="#安装相关软件" class="headerlink" title="安装相关软件"></a>安装相关软件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br><span class="line"></span><br><span class="line">brew install git</span><br></pre></td></tr></table></figure><p>然后安装<code>Hexo</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h3><p>在自己想要的目录执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heox init .</span><br></pre></td></tr></table></figure><p>目录如下<br><img src="http://ot3yv29j7.bkt.clouddn.com/15293158035733.jpg?imageView2/1/w/200/h/210/q/75|imageslim" alt=""></p><p>在目录下找到配置文件<code>_config.yml</code>并修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: root@152.92.13.78:blog.git(例)</span><br></pre></td></tr></table></figure><div class="tip"><br>云服务器最好是使用SSH登录，那种比较方便，通过以下命令即可添加<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~./ssh/id_dsa</span><br></pre></td></tr></table></figure><br><br>删除<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add -d ./ssh/id_xxx.pub</span><br></pre></td></tr></table></figure><br><br>查看<br>#<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add -l</span><br></pre></td></tr></table></figure><br><br></div><h1 id="三、执行"><a href="#三、执行" class="headerlink" title="三、执行"></a>三、执行</h1><p>最后在本地生成静态文件后再进行部署即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>访问<code>152.92.13.78:8080(例)</code>即为博客站点</p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Android 谷歌亲儿子系列线刷官方出厂包(Nexus 6P为例)</title>
      <link href="/2018/06/18/Android%20%E8%B0%B7%E6%AD%8C%E4%BA%B2%E5%84%BF%E5%AD%90%E7%B3%BB%E5%88%97%E7%BA%BF%E5%88%B7%E5%AE%98%E6%96%B9%E5%87%BA%E5%8E%82%E5%8C%85(Nexus%206P%E4%B8%BA%E4%BE%8B)/"/>
      <url>/2018/06/18/Android%20%E8%B0%B7%E6%AD%8C%E4%BA%B2%E5%84%BF%E5%AD%90%E7%B3%BB%E5%88%97%E7%BA%BF%E5%88%B7%E5%AE%98%E6%96%B9%E5%87%BA%E5%8E%82%E5%8C%85(Nexus%206P%E4%B8%BA%E4%BE%8B)/</url>
      <content type="html"><![CDATA[<h1 id="一、下载"><a href="#一、下载" class="headerlink" title="一、下载"></a>一、下载</h1><p>官方链接 <a href="https://developers.google.com/android/images" target="_blank" rel="noopener">官方出厂包下载(FQ)</a></p><hr><h1 id="二、修改"><a href="#二、修改" class="headerlink" title="二、修改"></a>二、修改</h1><p>解压出来是这个样子<br><img src="http://ot3yv29j7.bkt.clouddn.com/15293049424410.jpg?imageView2/1/w/200/h/150/q/75|imageslim" alt=""></p><p></p><p><br>需要把里面的zip文件也解压并且放到同一目录<br><img src="http://ot3yv29j7.bkt.clouddn.com/15293050030148.jpg?imageView2/1/w/200/h/200/q/75|imageslim" alt=""></p><p></p><p><br>然后修改<code>flash-all.sh</code>里面的内容，把目录下所有的<code>img文件</code>都包括进去，还有<code>android-info</code>,并删除最后一句解压zip的</p><p><img src="http://ot3yv29j7.bkt.clouddn.com/15293054836292.jpg?imageView2/1/w/900/h/400/q/75" alt=""></p><hr><h1 id="三、开始刷机"><a href="#三、开始刷机" class="headerlink" title="三、开始刷机"></a>三、开始刷机</h1><p>最后利用adb进入bootfast模式重启并连接上手机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb reboot bootloader</span><br></pre></td></tr></table></figure><p>直接运行<code>flash-all.sh</code>即可</p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Android源码以及内核下载</title>
      <link href="/2018/06/17/Android%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD/"/>
      <url>/2018/06/17/Android%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD/</url>
      <content type="html"><![CDATA[<p>I am Source</p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
